using System;

namespace Cavern.Virtualizer {
    /// <summary>Convolution filters for each ear and virtual channel to simulate a spatial environment.</summary>
    internal static class VirtualizerFilter { // TODO: Use actual dual-ear recorded impulses in multiple layers. 128 samples are more than enough.
        /// <summary>When using non-dual-ear impulses, crosstalk helps convey the effect.</summary>
        const float Crosstalk = .3f;

        static readonly float[] Left = new float[] { 0.03189259f, -0.001381825f, -0.02678654f, -0.01784475f, 0.001261886f, 0.00878023f, 0.01182162f, 0.0160342f, 0.0148264f, 0.007203882f, 0.004707173f, 0.003432951f, 0.006045169f, 0.007386914f, 0.0004786084f, -0.0005061844f, -0.001622702f, 0.003291891f, 0.002555643f, -0.001080424f, -0.005053057f, -0.005109186f, -0.001471065f, -0.003191071f, -0.00013974f, -0.0002542587f, -0.003765327f, -0.003030379f, -0.001974337f, -0.00331375f, -0.00447926f, -0.003611041f, -0.001590758f, -0.003093764f, -0.002842571f, -0.002567809f, -0.002323419f, 0.001011415f, -0.002037577f, -0.008824117f, -0.009231767f, -0.004163411f, -0.0007930469f, -0.0007198862f, -0.00100025f, -0.001186925f, -0.002749738f, -0.004408123f, -0.003270428f, -0.0004943397f, -0.002770179f, -0.005805243f, -0.005849192f, -0.002029727f, 0.0007026047f, -0.002381818f, -0.003228898f, -0.003024281f, -0.005027963f, -0.003620822f, 0.008679569f, 0.00744729f, -0.008989185f, -0.01250552f, -0.00762512f, 0.0005742218f, 0.003511962f, 0.005619803f, 0.001014712f, 0.0006758056f, 0.004213225f, 0.0006313984f, 0.0006833531f, 0.0002917583f, 0.001290449f, -0.002266342f, -0.003261403f, -0.003354664f, -0.003113115f, -0.001092741f, -0.001375531f, -0.002352653f, -0.003420996f, -0.001311933f, -0.001881527f, -0.002608617f, -0.002913067f, -0.001685006f, -0.0008633682f, -0.001374839f, 0.0004699696f, 0.0002992243f, -0.003236971f, -0.004584083f, -0.001494335f, 0.0009705413f, -0.001442646f, -0.0005289708f, 0.0008153191f, 0.001632561f, 0.001786366f, 0.002760299f, 0.00401602f, 0.002630338f, 0.0008404405f, 0.005081886f, 0.006643974f, 0.0006886428f, -0.002835068f, -0.003499631f, -0.002277366f, 0.000532667f, 0.0007455787f, -0.001378209f, -0.001861804f, 0.001001895f, 0.001450402f, 0.001278293f, 0.000272031f, -0.001694363f, -0.004339471f, -0.003910548f, -0.001637449f, -0.003615165f, -0.005090268f, -0.003513565f, -0.002035922f, -0.002520546f };
        static readonly float[] Right = new float[] { -0.02844143f, -0.02011178f, -0.005606398f, 0.005909446f, 0.01204142f, 0.01172667f, 0.0109779f, 0.01396162f, 0.01158351f, 0.004116918f, 0.001538856f, 0.00122687f, -0.000496045f, 0.0005925099f, -0.0001139225f, 0.002008884f, 0.004943262f, -0.001697119f, -0.001356151f, -0.005106489f, -0.006483509f, -0.003629973f, -0.002369941f, -0.0001963751f, -0.002926181f, -0.00242979f, -0.004603526f, -0.00309265f, -0.00180607f, -0.003552947f, -0.004158873f, -0.002958121f, -0.002282386f, -0.001879439f, -0.001410423f, 0.001755326f, -0.001338398f, -0.006786515f, -0.007385712f, -0.004326096f, -0.00074659f, 0.000622177f, 7.33111E-05f, 7.864023E-05f, -0.001506492f, -0.002509834f, -0.002250396f, -0.001278012f, -0.002699424f, -0.00470272f, -0.004159833f, -0.002705154f, 0.0007116003f, -0.002678907f, -0.004527104f, -0.001198389f, -0.003862058f, -0.004549385f, -0.000823613f, -0.001441212f, -0.0008086385f, -0.001662485f, -0.002284087f, -0.001858375f, -0.001241202f, -0.002634489f, -0.002780088f, -0.00186698f, -0.001950235f, -0.001896402f, -0.001617265f, -0.001019802f, -0.0003799798f, -0.00164338f, -0.001836144f, -0.001310895f, -0.001118712f, -0.0009706595f, -0.0006895055f, -0.0007097229f, -0.0007946423f, -0.0007492113f, -2.583621E-05f, 0.0002380448f, -0.0009977554f, -0.001687462f, -0.001422283f, -0.0003774166f, 0.0004667202f, 0.0004617083f, 0.0006316924f, 0.001640951f, 0.001397616f, 0.001012049f, 0.002031023f, 0.002768239f, 0.003312353f, 0.0028877f, 0.003293111f, 0.003472426f, 0.002522297f, -2.834945E-05f, 0.002919429f, 0.009058671f, 0.004602468f, -0.005556035f, -0.008232596f, -0.00742469f, -0.002206027f, 0.003184385f, 2.344005E-05f, -0.001079592f, -0.0009681471f, 0.0012097f, 0.0008046323f, 0.002005052f, 0.002622236f, -0.0007353103f, 0.0005212493f, 0.001335142f, -0.003081074f, -0.004129031f, -0.002760196f, -0.002305623f, -0.002309082f, -0.0008946602f, -0.000616648f, -0.001880855f };
        static readonly float[] RearLeft = new float[] { 0.05184048f, 0.005420445f, -0.002645865f, 0.002705681f, 0.005794656f, -0.01231077f, -0.001147383f, -0.0008071926f, -0.006217496f, -0.005385301f, -0.003450674f, 0.004253075f, -0.00839026f, -0.01514976f, -0.003515378f, -0.006411487f, 0.0009750329f, -0.004108202f, -0.003049564f, 0.002377139f, -0.002141268f, 0.005599692f, 0.00160526f, 0.007594326f, 0.01696449f, 0.01085175f, 0.003708397f, -0.0003977698f, -0.001876168f, 1.603038E-05f, 0.003406291f, 0.002510339f, 0.002439396f, -0.001821585f, 0.0008018151f, 0.002412403f, -0.002114189f, -0.004091584f, -0.007276182f, -0.005269263f, -0.002215702f, -0.004225827f, -0.00236077f, -0.003803113f, -0.002064026f, 0.0008047218f, -0.002849111f, 0.003383457f, 0.004613565f, 3.195804E-06f, 0.00127998f, -0.000365336f, 0.0008253498f, 0.0001978552f, 0.001509051f, 0.004436889f, 0.002209787f, 0.001373783f, 0.001894861f, 0.001181757f, 0.001362106f, 0.00014369f, 0.002544371f, 0.003182955f, 0.002479655f, 0.00202129f, 8.262138E-05f, -0.001405066f, -0.003464619f, -0.002918892f, 0.0004752842f, 0.0007299582f, 0.0005931016f, 0.0002041893f, -0.002252004f, -0.004518619f, -0.003422417f, -0.003738778f, -0.003104122f, 0.0001078317f, -0.000640235f, 0.0002729f, -0.00131032f, -5.432241E-05f, 0.002720725f, -0.00137238f, -0.0007925637f, 0.0009200472f, -0.0006273751f, 0.000398349f, 0.001356278f, 0.002717093f, 0.0005527969f, 0.002026362f, 0.005030026f, 0.005391722f, 0.001773551f, -0.001238334f, 0.0006077928f, 0.001347672f, 0.0002437562f, -0.001808207f, -0.002284313f, 0.001278165f, 0.0008163324f, -0.001450866f, 0.0004537974f, 0.0005352976f, 0.0007470354f, -0.000164566f, -0.00052024f, 0.001299897f, 7.002162E-05f, -0.0007261018f, -0.0003404562f, -0.0008301508f, 0.0007869344f, 0.001544455f, 0.001992462f, 0.00181149f, 0.0003824291f, 0.001681708f, 0.0007320629f, -0.0002160518f, 0.0003328667f, 0.0007840979f, 0.001888261f, 0.0005429892f };
        static readonly float[] RearRight = new float[] { 0.05550459f, 0.009274708f, -0.003934429f, 0.002610137f, 0.008651897f, -0.01154083f, -0.003558234f, 0.0005742502f, -0.006729038f, -0.006092153f, -0.005104618f, 0.003157573f, -0.004254751f, -0.004650618f, 0.007013932f, 0.000492946f, -0.002966282f, 0.00324477f, 0.01246618f, 0.01298351f, -0.001487182f, -0.002238631f, -0.002479702f, 0.005184446f, 0.009423415f, 0.008358888f, 0.002698193f, -0.01024342f, -0.006348624f, -0.009418512f, 0.0002606731f, 0.001116658f, -0.005913948f, -0.003764491f, -0.004370237f, 0.001063692f, 8.112979E-05f, -0.002740997f, -0.001809016f, -0.005520637f, -0.0008366458f, 0.002842835f, 0.001220763f, 0.0001297196f, -0.0005042285f, 0.001496955f, 0.002122116f, 0.00410471f, 0.006236317f, 0.002012171f, 0.002033631f, 0.0009596345f, -0.001060714f, -0.001580227f, -0.001293985f, 0.0008112198f, 0.0009108372f, -0.0005115451f, 0.0002220777f, -8.059019E-05f, -0.001282322f, -0.001499762f, -0.0004011685f, 0.0009251226f, 0.001676222f, -0.001575572f, -0.002094642f, -0.00310308f, -0.004658786f, -0.003083466f, -0.0007936361f, 0.0005410393f, 0.000716913f, -0.0005177431f, -0.001702957f, -0.0005693708f, 0.0001268517f, -0.001655144f, -0.002168227f, -0.001706757f, -0.0002913177f, 0.0009220393f, -0.0007856571f, -0.0008350132f, -0.0001158164f, -6.471827E-05f, 0.003186029f, 0.00647915f, 0.003927429f, 0.006413601f, 0.002714782f, -0.0011728f, 0.001332656f, -0.0008811792f, 0.0008695396f, -0.001585385f, -0.005185285f, 3.584642E-05f, -0.001143607f, -0.004581224f, -0.0008665228f, -0.001553151f, -0.003722966f, -0.003772388f, -0.002998803f, -0.001079611f, -0.002428606f, -0.001622358f, 0.000574259f, 0.0001372088f, 0.0007906132f, 0.002066811f, 0.001555078f, 0.002667181f, 0.001110305f, 0.00145747f, 0.003976035f, 0.002343926f, 0.000295508f, -0.001293502f, -0.00159397f, -0.0005367133f, -0.001207542f, -0.001905769f, -0.001957707f, -0.001446979f, -0.00121357f, -0.000959159f };
        static readonly float[] TopLeft = new float[] { 0.02869489f, -0.004149308f, -0.02719926f, -0.01410549f, -0.003952806f, 0.01046263f, 0.008855766f, 0.001883713f, 0.00598357f, 0.005803113f, 0.004755462f, 0.0007507374f, -0.004184306f, -0.003778722f, -0.004234338f, -0.002867815f, -0.0004297785f, -0.001642259f, -0.004044184f, -0.001534533f, -0.002402429f, -0.003188872f, -0.002688602f, -0.00143448f, -0.002872301f, -0.002829164f, -0.0009339508f, -0.0002894379f, -0.001372291f, -0.001417611f, -0.0006696269f, -0.0009514897f, -0.0004956674f, 0.0002104537f, -7.787688E-05f, -0.001538956f, -0.0008988705f, -0.0002879963f, -0.0008659036f, -0.001846015f, -0.001598766f, -0.001188715f, -0.001537357f, -0.001116259f, -0.0003309161f, -0.0005351274f, -0.001042539f, -0.0009364105f, -0.001347446f, -0.001362799f, -0.000359535f, 0.0005918626f, 2.244915E-05f, -1.76573E-05f, 0.00285257f, 0.003515851f, 0.0001972901f, -0.0006777558f, -0.001380597f, -0.00356213f, -0.00221165f, -0.0004140171f, 0.001192099f, 0.001654226f, 0.0009552789f, 0.0009298121f, -0.0006526227f, -0.001768365f, -0.0002703032f, -0.000193481f, -0.0009097117f, -0.002189701f, -0.002604167f, -0.002494114f, -0.001485818f, -0.0003756146f, 0.0006876028f, 0.0003547258f, -9.337209E-05f, -4.05204E-05f, 0.00146797f, 0.001300802f, 0.00121304f, 0.005157799f, 0.002971082f, -0.0032334f, -0.003770947f, 0.0001179622f, 0.001753408f, 0.002423457f, 0.001264717f, 0.001785896f, 0.004934358f, 0.005580704f, 0.004904968f, 0.001233097f, -0.0004468742f, -0.001735484f, -0.00132142f, 5.377726E-05f, -9.058295E-05f, -0.001749136f, -0.001117202f, -0.001043928f, -0.002087398f, -0.001433527f, -0.0003504378f, -0.0007303125f, -0.00249554f, -0.002603992f, -0.0005840675f, -0.0001093875f, -0.001935178f, -0.000687396f, -9.934205E-05f, -0.001103943f, -0.001560707f, 0.003033646f, 0.004423745f, -0.0007819384f, -0.005558005f, -0.006355405f, -0.004415549f, -0.00162931f, 0.001754197f, 0.001143475f, 0.0005233792f, 0.002312111f };
        static readonly float[] TopRight = new float[] { -0.02187924f, -0.009846205f, 0.01733292f, 0.01258684f, 0.009388531f, -0.003479617f, -0.009799297f, -0.006103518f, -0.003739193f, -0.001248897f, -0.004644416f, 0.004015743f, 0.002662027f, 0.001882899f, 0.000644801f, 0.00283056f, 0.001865281f, 0.001440564f, 0.004633955f, 0.001908322f, 0.001364436f, 0.001468318f, 0.002424608f, 0.001082271f, 0.0005332463f, 0.002766325f, 0.001112392f, -0.0002331217f, 0.0005944174f, 0.001750539f, 0.0006247946f, 8.955627E-05f, 0.0006056975f, 0.0004235595f, -0.00122396f, 0.0009920346f, 0.002172516f, 0.0008732044f, 0.0002400823f, 0.001603882f, 0.001915669f, 0.0008729188f, 0.0007157128f, 0.001589871f, 0.0006395333f, 0.0005753135f, 0.001429575f, 0.001105844f, 0.0003047897f, 0.0004572524f, 0.0006414314f, 0.0002869615f, 0.0001650555f, 0.0006648112f, -0.0009664417f, -0.001903322f, 0.0007968852f, 0.002066133f, 0.001594482f, 0.0009007308f, 5.209676E-05f, -0.0002009817f, -0.0004606065f, 6.292012E-06f, 0.0003030372f, 0.001174877f, 0.001087695f, 0.001186752f, 0.0007444272f, 0.0005399107f, 0.0008539396f, 0.001094267f, 0.001572623f, 0.001146624f, 0.001289138f, 0.0004435839f, 0.0004629658f, -0.0001946164f, 0.0006191203f, 0.0004438731f, 0.0007722884f, 0.000436067f, 0.001012098f, 0.0005608507f, 0.0004430482f, 0.0001318456f, -0.0002581022f, -0.0005202402f, 0.0001194052f, 0.0007629199f, 0.0007500314f, 0.0005119335f, -0.0003221975f, -0.0004770638f, -0.0005521877f, 0.0003933073f, 0.0003670082f, 0.0002192323f, -0.0006189768f, -0.0006980649f, -0.0002854922f, -3.804647E-05f, -0.0001897858f, -0.0004484376f, -0.0001812825f, -0.0002287381f, -0.0004110921f, 0.0001733912f, 0.0008614482f, 0.0004199343f, -0.001363151f, -0.001396185f, -0.001031733f, 9.78332E-05f, -0.0003584592f, 0.0003724571f, -0.001143112f, -0.006096041f, -0.001945314f, 0.005011035f, 0.007517771f, 0.003588573f, -0.001143832f, -0.002740155f, -0.002240781f, 0.0003398699f, -0.0008920784f, -0.0003369775f };

        static Convolver L, R, RL, RR, TL, TR;

        /// <summary>Set up virtual channel set for the virtualization filters.</summary>
        public static void SetLayout() {
            AudioListener3D.Channels = new Channel[6] { new Channel(0, -45), new Channel(0, 45),
                new Channel(0, -135), new Channel(0, 135), new Channel(-45, -90), new Channel(-45, 90) };
        }

        /// <summary>Apply the virtualizer on the <see cref="AudioListener3D"/>'s output,
        /// if the configuration matches the virtualization layout and filter sample rate.</summary>
        public static void Process(float[] Output) {
            int ChannelCount = AudioListener3D.ChannelCount, UpdateRate = AudioListener3D.Current.UpdateRate;
            if (AudioListener3D.Current.SampleRate != 48000)
                return;
            if (L == null) {
                L = new Convolver(Left);
                R = new Convolver(Right);
                RL = new Convolver(RearLeft);
                RR = new Convolver(RearRight);
                TL = new Convolver(TopLeft);
                TR = new Convolver(TopRight);
            }
            float[][] ChannelSplit = new float[ChannelCount][];
            for (int Channel = 0; Channel < ChannelCount; ++Channel)
                ChannelSplit[Channel] = new float[UpdateRate];
            int OutputSample = 0;
            for (int Sample = 0; Sample < UpdateRate; ++Sample)
                for (int Channel = 0; Channel < ChannelCount; ++Channel)
                    ChannelSplit[Channel][Sample] = Output[OutputSample++];
            // TODO: don't touch anything below 120 Hz
            L.Process(ChannelSplit[0]);
            R.Process(ChannelSplit[1]);
            RL.Process(ChannelSplit[2]);
            RR.Process(ChannelSplit[3]);
            TL.Process(ChannelSplit[4]);
            TR.Process(ChannelSplit[5]);
            Array.Clear(Output, 0, Output.Length);
            for (int Channel = 0; Channel < ChannelCount; Channel += 2) { // Stereo downmix of left side
                for (int Sample = 0; Sample < UpdateRate; ++Sample) {
                    int SamplePos = Sample * ChannelCount;
                    Output[SamplePos] += ChannelSplit[Channel][Sample];
                    Output[SamplePos + 1] += ChannelSplit[Channel][Sample] * Crosstalk;
                }
            }
            for (int Channel = 1; Channel < ChannelCount; Channel += 2) { // Stereo downmix of right side
                for (int Sample = 0; Sample < UpdateRate; ++Sample) {
                    int SamplePos = Sample * ChannelCount;
                    Output[SamplePos + 1] += ChannelSplit[Channel][Sample];
                    Output[SamplePos] += ChannelSplit[Channel][Sample] * Crosstalk;
                }
            }
        }
    }
}