using System;
using UnityEngine;

using Cavern.Filters;

namespace Cavern.Cavernize {
    class SpatializedChannel {
        public readonly CavernizeChannel Channel;
        public readonly Crossover Filter;
        public readonly float[] Output;
        public bool WrittenOutput;
        public CavernizeOutput MovingSource { get; private set; }
        public CavernizeOutput GroundSource { get; private set; }
        public float LastLow;
        public float LastNormal;
        public float LastHigh;
        public float Height;
        public int TicksTook;
        public Renderer MovingRenderer { get; private set; }
        public Renderer GroundRenderer { get; private set; }

        void CreateSource(Cavernizer Master, bool GroundLevel) {
            GameObject NewObject;
            if (Channel != CavernizeChannel.ScreenLFE)
                NewObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);
            else
                NewObject = GameObject.CreatePrimitive(PrimitiveType.Cube);
            NewObject.name = Channel.Name;
            CavernizeOutput NewSource = NewObject.AddComponent<CavernizeOutput>();
            NewSource.Master = Master;
            NewSource.Channel = this;
            if (NewSource.GroundLevel = GroundLevel) {
                GroundSource = NewSource;
                GroundRenderer = NewObject.GetComponent<Renderer>();
            } else {
                MovingSource = NewSource;
                MovingRenderer = NewObject.GetComponent<Renderer>();
            }
            int SampleRate = AudioListener3D.Current.SampleRate;
            NewSource.Clip = AudioClip.Create(string.Empty, SampleRate, 1, SampleRate, false); // TODO: remove
            NewSource.Loop = true;
            NewSource.VolumeRolloff = Rolloffs.Disabled;
            NewSource.LFE = Channel.LFE;
            // TODO: make this work with custom sample collectors
            //NewObject.AddComponent<ScaleByGain>().Source = NewSource;
            if (Channel.Muted)
                NewSource.Volume = 0;
            NewObject.transform.position =
                Vector3.Scale(CavernUtilities.PlaceInCube(new Vector3(0, Channel.Y)), AudioListener3D.EnvironmentSize);
        }

        public SpatializedChannel(CavernizeChannel Source, Cavernizer Master, int UpdateRate) {
            Channel = Source;
            Filter = new Crossover(250);
            Output = new float[UpdateRate];
            CreateSource(Master, true);
            CreateSource(Master, false);
        }

        public void Tick(float EffectMult, float SmoothFactor, float CrossoverFreq, bool Visualize) {
            int Samples = Output.Length;
            if (!WrittenOutput)
                Array.Clear(Output, 0, Samples);
            if (Filter.Frequency != CrossoverFreq)
                Filter.Frequency = CrossoverFreq;
            Filter.Process(Output);
            MovingRenderer.enabled = GroundRenderer.enabled = Visualize && WrittenOutput;
            if (WrittenOutput) {
                float MaxDepth = .0001f, MaxHeight = .0001f;
                for (int Offset = 0; Offset < Samples; ++Offset) {
                    // Height is generated by a simplified measurement of volume and pitch
                    LastHigh = .9f * (LastHigh + Output[Offset] - LastNormal);
                    float AbsHigh = Math.Abs(LastHigh);
                    if (MaxHeight < AbsHigh)
                        MaxHeight = AbsHigh;
                    LastLow = LastLow * .99f + LastHigh * .01f;
                    float AbsLow = Math.Abs(LastLow);
                    if (MaxDepth < AbsLow)
                        MaxDepth = AbsLow;
                    LastNormal = Output[Offset];
                }
                MaxHeight = (MaxHeight - MaxDepth * 1.2f) * EffectMult;
                if (MaxHeight < -.2f)
                    MaxHeight = -.2f;
                else if (MaxHeight > 1)
                    MaxHeight = 1;
                Height = CavernUtilities.FastLerp(Height, MaxHeight, SmoothFactor);
                Transform TargetTransform = MovingSource.transform;
                TargetTransform.position = CavernUtilities.FastLerp(TargetTransform.position,
                    new Vector3(TargetTransform.position.x, MaxHeight * AudioListener3D.EnvironmentSize.y, TargetTransform.position.z), SmoothFactor);
            }
        }

        public void Destroy() {
            if (MovingSource) {
                UnityEngine.Object.Destroy(MovingSource.Clip);
                UnityEngine.Object.Destroy(MovingSource.gameObject);
            }
            if (GroundSource) {
                UnityEngine.Object.Destroy(GroundSource.Clip);
                UnityEngine.Object.Destroy(GroundSource.gameObject);
            }
        }
    }
}